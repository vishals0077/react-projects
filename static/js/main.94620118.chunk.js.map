{"version":3,"sources":["SearchBox.js","Card.js","CardList.js","Scroll.js","App.js","serviceWorker.js","index.js"],"names":["SearchBox","onschange","className","type","placeholder","onChange","Card","id","name","email","src","CardList","robots","map","item","i","key","Scroll","props","style","overflowY","height","margin","children","App","onsearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","filteredrobots","this","filter","robot","toLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qNAWeA,EAVC,SAAC,GAChB,IADiBC,EAClB,EADkBA,UAEjB,OACC,2BACAC,UAAU,mCACVC,KAAK,SACJC,YAAY,cACZC,SAAUJ,KCQGK,EAbH,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,GAAGC,EAAe,EAAfA,KAAKC,EAAU,EAAVA,MACtB,OACC,yBAAKP,UAAU,iDACf,yBAAKQ,IAAG,+BAA0BH,EAA1B,cACR,6BACC,wBAAIL,UAAU,aAAaM,GAC3B,2BAAIC,MCaSE,EAnBC,SAAC,GAAa,IAAZC,EAAW,EAAXA,OAClB,OACC,6BAEAA,EAAOC,KAAI,SAACC,EAAKC,GAChB,OACC,kBAAC,EAAD,CACAC,IAAKD,EACLR,GAAIO,EAAKP,GACTC,KAAMM,EAAKN,KACXC,MAAOK,EAAKL,aCHDQ,EARF,SAACC,GAEb,OACC,yBAAKC,MAAO,CAACC,UAAU,SAAUC,OAAO,QAASC,OAAO,SACvDJ,EAAMK,WCwCMC,E,kDAtCd,aACC,IAAD,8BACC,gBAYDC,eAAe,SAACC,GAEf,EAAKC,SAAS,CAACC,YAAYF,EAAMG,OAAOC,SAbxC,EAAKC,MAAM,CACZnB,OAAO,GACPgB,YAAY,IAJZ,E,gEAQC,IAAD,OACCI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAG,EAAKT,SAAS,CAACf,OAAOwB,S,+BASpC,IAAD,OACOC,EAAeC,KAAKP,MAAMnB,OAAO2B,QAAO,SAAAC,GAC9C,OAAOA,EAAMhC,KAAKiC,cAAcC,SAAS,EAAKX,MAAMH,YAAYa,kBAEhE,OACC,yBAAKvC,UAAU,MACf,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWD,UAAWqC,KAAKb,iBAC3B,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUb,OAAQyB,U,GAhCHM,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,EAAD,MACGC,SAASC,eAAe,SDwHvB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.94620118.chunk.js","sourcesContent":["import React from 'react';\r\nconst SearchBox=({onschange}) =>\r\n{\r\n\treturn(\r\n\t\t<input \r\n\t\tclassName=\"pa3 ba b--green bg-lightest-blue\" \r\n\t\ttype=\"search\"\r\n\t\t placeholder=\"Search here\" \r\n\t\t onChange={onschange}/>\r\n\t\t);\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\nconst Card = ({id,name,email}) =>{\r\n\treturn(\r\n\t\t<div className=\"tc dib bg-green ma2 pa3 grow br3 bw2 shadow-5\">\r\n\t\t<img src={`https://robohash.org/${id}?200x200`}/>\r\n\t\t<div>\r\n\t\t\t<h2 className=\"ws-normal\">{name}</h2>\r\n\t\t\t<p>{email}</p>\r\n\t\t</div>\r\n\r\n\t\t</div>\r\n\t);\r\n\r\n}\r\n export default Card;","import React from 'react';\r\nimport Card from './Card';\r\n \r\n const CardList= ({robots}) =>{\r\n\treturn(\r\n\t\t<div>\r\n{\r\n\t\trobots.map((item,i) =>{\r\n\t\t\treturn(\r\n\t\t\t\t<Card \r\n\t\t\t\tkey={i} \r\n\t\t\t\tid={item.id} \r\n\t\t\t\tname={item.name} \r\n\t\t\t\temail={item.email} \r\n\t\t\t\t/>\r\n\t\t\t\t);\r\n\t\t})\r\n\t\t}\r\n\t\t</div>\r\n\t\t);\r\n }\r\n\r\n export default CardList;","import React from 'react';\r\n\r\nconst Scroll=(props)=>\r\n{\r\n\treturn(\r\n\t\t<div style={{overflowY:'scroll' ,height:'800px' ,margin:'10px'}}>\r\n\t\t{props.children}\r\n\t\t</div>\r\n\t\t);\r\n}\r\nexport default Scroll;","import React from 'react';\r\nimport SearchBox from './SearchBox';\r\nimport CardList from './CardList';\r\nimport Scroll from './Scroll';\r\n//import {robots} from './robots';\r\n\r\nclass App extends React.Component\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tsuper()\r\n\t\tthis.state={\r\n\trobots:[],\r\n\tsearchfield:''\r\n}\r\n\t}\r\n\tcomponentDidMount()\r\n\t{\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response=> response.json())\r\n\t\t.then(users=> this.setState({robots:users}))\r\n\t}\r\n\tonsearchChange=(event)=>\r\n\t{\r\n\t\tthis.setState({searchfield:event.target.value})\r\n\t}\r\n\r\n\t\r\n\trender()\r\n\t{\r\n\t\tconst filteredrobots=this.state.robots.filter(robot=>{\r\n\t\treturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n\t})\r\n\t\treturn(\r\n\t\t\t<div className=\"tc\">\r\n\t\t\t<h1 className=\"f1\">Robofriends</h1>\r\n\t\t\t<SearchBox onschange={this.onsearchChange}/>\r\n\t\t\t<Scroll>\r\n\t\t\t<CardList robots={filteredrobots}/>\r\n\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\r\n\t\t\t);\r\n\t}\r\n} \r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons';\nimport App from './App';\n\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App/>\n  ,  document.getElementById('root')\n);\n    //<Card id={robots[0].id} name={robots[0].name} email={robots[0].email}/>\n    //<Card id={robots[1].id} name={robots[1].name} email={robots[1].email}/>\n    //<Card id={robots[2].id} name={robots[2].name} email={robots[2].email}/>\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}